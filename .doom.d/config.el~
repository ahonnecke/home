;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Ashton Honnecke"
      user-mail-address "ashton@pixelstub.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.


;; (defun contextual:find-file ()
;;   (interactive)
;;   (call-interactively (if (projectile-project-p)
;;                           'projectile-find-file
;;                         'helm-find-files)))
;;(define-key global-map (kbd "C-x f") 'helm-find-files)

;;(define-key projectile-mode-map (kbd "H-p") 'projectile-command-map)
;;(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

;; get back
(global-set-key (kbd "H-p p") 'projectile-switch-project)

(global-set-key (kbd "<C-next>") 'windmove-right)
(global-set-key (kbd "<C-prior>") 'windmove-left)

;;(define-key projectile-mode-map (kbd "C-x f") 'helm-find-files)
;;(define-key global-map (kbd "C-x C-f") 'contextual:find-file)
;; (define-key projectile-mode-map (kbd "M-r a") 'ag-regexp-project-at-point)
;; (define-key projectile-mode-map (kbd "M-r r") 'ag-project-regexp)

;; (global-set-key (kbd "C-c h") 'dash-at-point)
;; ;(global-set-key (kbd "C-M-d") 'dash-at-point)

;; ;;(setq switch-to-ag-buffer
;; ;;      [?\C-x ?b ?* ?a ?g ?  ?s ?e ?a ?r ?c ?h ?* return])
;; ;(define-key projectile-mode-map [?\s-c] 'switch-to-ag-buffer)
;; ;;(global-set-key (kbd "C-c p") 'switch-to-ag-buffer)

;; ;(global-set-key (kbd "M-<return>") 'hippie-expand)
(global-set-key (kbd "H-c") 'comment-region)
(global-set-key (kbd "H-M-u") 'uncomment-region)

(global-set-key (kbd "M-<return>") 'hippie-expand)

;; Go to line number
(global-set-key (kbd "H-l") 'goto-line)

;; Go to visible line with home row keys
;;(global-set-key (kbd "H-l") 'avy-goto-line)

;;e
;;(global-set-key (kbd "C-c r") 'replace-string)
(global-set-key (kbd "H-q") 'query-replace)

(global-set-key (kbd "H-s") 'swiper-thing-at-point)
(global-set-key (kbd "M-u") 'string-inflection-python-style-cycle)

(global-set-key (kbd "C-x c p") 'string-inflection-python-style-cycle)
(global-set-key (kbd "C-x c a") 'string-inflection-all-cycle)
(global-set-key (kbd "C-x c s") 'string-inflection-underscore)
(global-set-key (kbd "C-x c u") 'string-inflection-upcase)

(global-set-key (kbd "C-<right>") 'python-indent-shift-right)
(global-set-key (kbd "C-<left>") 'python-indent-shift-left)

(global-set-key (kbd "C-s") 'isearch-forward)
;; (key-chord-define-global ";j" 'avy-goto-char)
;;f
(global-set-key (kbd "s-f") 'forward-sexp)
(global-set-key (kbd "s-b") 'backward-sexp)
(global-set-key (kbd "C-x k") 'kill-this-buffer)
(global-set-key (kbd "C-x C-k") 'kill-buffer)
(global-set-key (kbd "H-y") 'ace-window)
(global-set-key (kbd "H-u") 'ace-swap-window)
;; (key-chord-define-global ";a" 'ace-window)
;; (key-chord-define-global ";s" 'ace-swap-window)
;; (key-chord-define-global ";u" 'undo)
;; (key-chord-define-global ";k" 'kill-buffer)
;; (key-chord-define-global "'." 'ace-jump-mode) ;; select characters to jump to
;; ;;(key-chord-define-global "''" 'save-buffer)
;; (key-chord-define-global ";c" 'string-inflection-all-cycle)
(global-set-key (kbd "H-; .") 'end-of-buffer)
(global-set-key (kbd "H-; ,") 'beginning-of-buffer)
(global-set-key (kbd "H-.") 'end-of-buffer)
(global-set-key (kbd "H-,") 'beginning-of-buffer)
(global-set-key (kbd "H d") 'crux-duplicate-current-line-or-region)

;; ;;(global-set-key (kbd "M-o") (quote ace-window))
;; (define-key shell-mode-map (kbd "M-o") (quote ace-window))

;; (define-key shell-mode-map (kbd "C-x o") (quote ace-window))
;; (global-set-key (kbd "C-x o") (quote ace-window))

;; ;;(global-set-key (kbd "H-o") (quote ace-window))

;;(global-set-key (kbd "H-r") 'crux-recentf-find-file)
(global-set-key (kbd "H-r") 'recentf-open-files)
(global-set-key (kbd "H-j") 'crux-top-join-line)
(global-set-key (kbd "H-k") 'crux-kill-whole-line)
(global-set-key (kbd "H-m m") 'magit-status)
(global-set-key (kbd "H-m l") 'magit-log)
(global-set-key (kbd "H-m f") 'magit-log-buffer-file)
(global-set-key (kbd "H-m b") 'magit-blame)
(global-set-key (kbd "H-o") 'crux-smart-open-line-above)

(global-set-key (kbd "H-C-f") 'find-file)
(global-set-key (kbd "H-f") 'fzf)
(global-set-key (kbd "H-o") 'browse-url-at-point)

(global-set-key (kbd "C-w") 'kill-region)

;;(global-set-key (kbd "M-l") 'goto-line)
(global-set-key (kbd "C-l") 'recenter-top-bottom)

(global-set-key (kbd "H-; l") 'flycheck-list-errors)

(global-set-key (kbd "C-;") 'er/expand-region)
;;(define-key flyspell-mode-map (kbd "C-;") 'er/expand-region)

(global-set-key (kbd "H-<right>") 'windmove-right)
(global-set-key (kbd "H-<left>") 'windmove-left)
(global-set-key (kbd "H-<up>") 'windmove-up)
(global-set-key (kbd "H-<down>") 'windmove-down)

;; C-c f is the prefix for all file related shortcuts, of which there is one so far
;;(global-set-key (kbd "C-c f r") 'rename-file-and-buffer)

;;(setq bidi-inhibit-bpa t)

(provide 'init-bindings)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-bindings.el ends here
