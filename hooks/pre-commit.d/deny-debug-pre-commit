#!/bin/bash
#
# This pre-commit hook checks that you havn't left and DONOTCOMMIT tokens in
# your code when you go to commit.
#
# To use this script copy it to .git/hooks/pre-commit and make it executable.
#
# This is provided just as an example of how to use a pre-commit hook to
# catch nasties in your code.

# Work out what to diff against, really HEAD will work for any established repository.
if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

diffstr=`git diff --cached $against | grep -e '^\+.*DONOTCOMMIT.*$'`
if [[ -n "$diffstr" ]] ; then
    echo "You have left DONOTCOMMIT in your changes, you can't commit until it has been removed."
    exit 1
fi

diffstr=`git diff --cached $against | grep -e '^\+.*debug().*$'`
if [[ -n "$diffstr" ]] ; then
    echo "You have left debug in your changes, you can't commit until it has been removed."
    exit 1
fi

diffstr=`git diff --cached $against | grep -e '^\+.*show_trace.*$'`
if [[ -n "$diffstr" ]] ; then
    echo "You have left show_trace in your changes, you can't commit until it has been removed."
    exit 1
fi
