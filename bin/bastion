#!/usr/bin/env python3

from shutil import copyfile

import os
import argparse
from pathlib import Path
from prompt_toolkit import prompt
from prompt_toolkit.completion import WordCompleter

# This script with rewrite your ssh config to point a differnet basion host
# it expectes that there exists a dir at ssh_config_list
# and further that directory has a common.conf file that holds your ssh config that's not
# dynamic.  Every other file in there is assumed to be a bastion host
# Example:
# https://github.com/ahonnecke/home/blob/master/ssh_configs/

# You can just copy all those and edit the common to your taste


class PathUtils:
    @property
    def home(self):
        return str(Path.home())

    @property
    def ssh_config_slug(self):
        return os.path.join(self.home, ".ssh", "config")

    @property
    def common_path(self):
        return os.path.join(self.ssh_configs_dir, "common.conf")

    @property
    def ssh_configs_dir(self):
        return os.path.join(self.home, "src", "home", "ssh_configs")

    @property
    def ssh_config_list(self):
        results = []
        for file in os.listdir(self.ssh_configs_dir):
            if file.endswith(".conf"):
                results.append(file)
        return results

    @property
    def bastion_hosts_list(self):
        return [x.replace(".conf", "-bastion") for x in self.ssh_config_list]

    def unlink(self, path):
        if os.path.islink(path):
            os.unlink(path)


class TerminalWriter:
    def print_header(self, message):
        print(f"###############################################################")
        print(f"{message}")
        print(f"###############################################################")


# @TODO move parser into a utils location
class Parser:
    _args = None
    _parser = None

    @property
    def args(self):
        if not self._args:
            self._args = self.parser.parse_args()
        return self._args

    @property
    def parser(self):
        if not self._parser:
            self._parser = argparse.ArgumentParser(description="Repoint bastion tunnel")
            self._parser.add_argument(
                "host", help="host to point at", default=None, nargs="?"
            )
        return self._parser


class Bastion(PathUtils, TerminalWriter, Parser):
    def main(self):
        if not self.args.host:
            bastion_completer = WordCompleter(b.bastion_hosts_list)
            conf = prompt("Choose a bastion host: ", completer=bastion_completer)
            host = conf.replace("-bastion", ".conf")

        self.unlink(self.ssh_config_slug)

        dest = os.path.join(self.ssh_configs_dir, host)

        # self.print_header(f"{dest} -> {self.ssh_config_slug}")
        # os.symlink(dest, self.ssh_config_slug)

        # @TODO make this write files
        self.print_header(f"Copying {self.common_path} {self.ssh_config_slug}")

        copyfile(self.common_path, self.ssh_config_slug)

        with open(self.ssh_config_slug, "a") as final:
            with open(dest, "r") as partial:
                final.write(partial.read())


if __name__ == "__main__":
    b = Bastion()
    b.main()
